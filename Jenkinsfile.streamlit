// Jenkinsfile - located in the root of your Git repository

pipeline {
    agent any // Tells Jenkins to run this pipeline on any available agent

    environment {
        // Retrieve ACR login credentials securely from Jenkins's built-in credential management
        // The IDs 'jenkins-acr-username' and 'jenkins-acr-password' must match the IDs you just created in Jenkins
        ACR_USERNAME = credentials('jenkins-acr-username')
        ACR_PASSWORD = credentials('jenkins-acr-password')
        ACR_LOGIN_SERVER = 'mlops77.azurecr.io' // <<< MAKE SURE THIS IS YOUR CORRECT ACR LOGIN SERVER

        // Define image name and tag for versioning
        IMAGE_NAME = "streamlit-app" // This should match your Dockerfile's expected image name
        // Using BUILD_NUMBER ensures each build gets a unique tag
        IMAGE_TAG = "1-${BUILD_NUMBER}" 
        FULL_IMAGE_NAME = "${ACR_LOGIN_SERVER}/${IMAGE_NAME}:${IMAGE_TAG}"
    }

    stages {
        stage('Checkout Code') {
            steps {
                // This step pulls your code from Git based on the SCM configuration in Jenkins job
                checkout scm
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Execute docker build command.
                    // The '.' means Dockerfile is in the current directory (which is the repo root after checkout)
                    sh "docker build -t ${FULL_IMAGE_NAME} -f Dockerfile.streamlit ."
                    echo "Docker image built: ${FULL_IMAGE_NAME}"
                }
            }
        }

        stage('Push Docker Image to ACR') {
            steps {
                script {
                    // This block securely retrieves username and password from Jenkins credentials
                    // and makes them available as environment variables (ACR_UN_SECURE, ACR_PW_SECURE)
                    // ONLY within this 'withCredentials' scope.
                    withCredentials([usernamePassword(credentialsId: 'jenkins-acr-username', usernameVariable: 'ACR_UN_SECURE', passwordVariable: 'ACR_PW_SECURE')]) {
                        // Your suggested method: echo the password and pipe it to docker login --password-stdin
                        sh "echo \"${ACR_PW_SECURE}\" | docker login ${ACR_LOGIN_SERVER} -u ${ACR_UN_SECURE} --password-stdin"
                        echo "Docker login command executed securely."
                    }

                    // After a successful login, the Docker daemon is authenticated for this registry.
                    // Now, push the image.
                    sh "docker push ${FULL_IMAGE_NAME}"
                    echo "Docker image pushed to ACR: ${FULL_IMAGE_NAME}"

                    // It's good practice to log out when done.
                    sh "docker logout ${ACR_LOGIN_SERVER}"
                }
            }
        }
    }
}
